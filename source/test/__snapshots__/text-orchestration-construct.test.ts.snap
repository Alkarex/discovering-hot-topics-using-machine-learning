// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test orchestration construct 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9ArtifactHashED6782C7": Object {
      "Description": "Artifact hash for asset \\"041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9\\"",
      "Type": "String",
    },
    "AssetParameters041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9S3BucketBF0DC36C": Object {
      "Description": "S3 bucket for asset \\"041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9\\"",
      "Type": "String",
    },
    "AssetParameters041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9S3VersionKey8BBC34FA": Object {
      "Description": "S3 key for asset version \\"041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9\\"",
      "Type": "String",
    },
    "AssetParameters04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3ArtifactHashAF4D4558": Object {
      "Description": "Artifact hash for asset \\"04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3\\"",
      "Type": "String",
    },
    "AssetParameters04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3S3Bucket3B1B5535": Object {
      "Description": "S3 bucket for asset \\"04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3\\"",
      "Type": "String",
    },
    "AssetParameters04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3S3VersionKeyA2B0343F": Object {
      "Description": "S3 key for asset version \\"04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3\\"",
      "Type": "String",
    },
    "AssetParameters28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992fArtifactHashA0AD976E": Object {
      "Description": "Artifact hash for asset \\"28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992f\\"",
      "Type": "String",
    },
    "AssetParameters28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992fS3BucketD992FB4D": Object {
      "Description": "S3 bucket for asset \\"28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992f\\"",
      "Type": "String",
    },
    "AssetParameters28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992fS3VersionKey995B9840": Object {
      "Description": "S3 key for asset version \\"28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992f\\"",
      "Type": "String",
    },
    "AssetParameters7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3aArtifactHashFA91B6F1": Object {
      "Description": "Artifact hash for asset \\"7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3a\\"",
      "Type": "String",
    },
    "AssetParameters7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3aS3BucketBFA9559B": Object {
      "Description": "S3 bucket for asset \\"7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3a\\"",
      "Type": "String",
    },
    "AssetParameters7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3aS3VersionKey9C2CEDBC": Object {
      "Description": "S3 key for asset version \\"7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3a\\"",
      "Type": "String",
    },
    "AssetParametersaf1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07ArtifactHash38D3F123": Object {
      "Description": "Artifact hash for asset \\"af1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07\\"",
      "Type": "String",
    },
    "AssetParametersaf1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07S3Bucket63CA74C7": Object {
      "Description": "S3 bucket for asset \\"af1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07\\"",
      "Type": "String",
    },
    "AssetParametersaf1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07S3VersionKeyF76CB0B6": Object {
      "Description": "S3 key for asset version \\"af1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07\\"",
      "Type": "String",
    },
    "AssetParametersc01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6ArtifactHash0C84E848": Object {
      "Description": "Artifact hash for asset \\"c01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6\\"",
      "Type": "String",
    },
    "AssetParametersc01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6S3Bucket99334E05": Object {
      "Description": "S3 bucket for asset \\"c01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6\\"",
      "Type": "String",
    },
    "AssetParametersc01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6S3VersionKey4EA1BA31": Object {
      "Description": "S3 key for asset version \\"c01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AccessLogD598EBE9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructImageAnalysisLambdaFunctionB2EC65DD": Object {
      "DependsOn": Array [
        "OrchestrationConstructImageAnalysisLambdaFunctionServiceRoleDefaultPolicy5CFD3347",
        "OrchestrationConstructImageAnalysisLambdaFunctionServiceRole8D0CDC70",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersaf1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07S3Bucket63CA74C7",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersaf1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07S3VersionKeyF76CB0B6",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersaf1fcbb8f253939552f092804eebabb0945cb4a0c4acdf9f2c184aded89bbc07S3VersionKeyF76CB0B6",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "S3_BUCKET_NAME": Object {
              "Ref": "OrchestrationConstructImageBucketS3Bucket20418E23",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructImageAnalysisLambdaFunctionServiceRole8D0CDC70",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 600,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructImageAnalysisLambdaFunctionServiceRole8D0CDC70": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructImageAnalysisLambdaFunctionServiceRoleDefaultPolicy5CFD3347": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructImageBucketS3Bucket20418E23",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructImageBucketS3Bucket20418E23",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructImageAnalysisLambdaFunctionServiceRoleDefaultPolicy5CFD3347",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructImageAnalysisLambdaFunctionServiceRole8D0CDC70",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructImageBucketS3Bucket20418E23": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "AccessLogD598EBE9",
          },
          "LogFilePrefix": "OrchestrationConstruct/",
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructImageBucketS3BucketPolicy6A71B078": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "OrchestrationConstructImageBucketS3Bucket20418E23",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "OrchestrationConstructImageBucketS3Bucket20418E23",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
            Object {
              "Action": Array [
                "s3:List*",
                "s3:Get*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "rekognition.amazonaws.com",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructImageBucketS3Bucket20418E23",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructImageBucketS3Bucket20418E23",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "OrchestrationConstructLabelsRekAnalyzeC2C4DA03": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Rekognition services. The Rekognition services do not have a resource arn.
                  This permission is retricted to the lambda function responsible for accessing the Amazon Rekognition service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "rekognition:detectModerationLabels",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructLabelsRekAnalyzeC2C4DA03",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructModerationLabelsLambdaFunctionServiceRoleF7ACBAFD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructLambdaComprehendPolicy140F9123": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Comprehend services.
                  The comprehend services not have a resource arn. This permission is retricted to
                   the lambda function responsible for accessing the Amazon Comprehend service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "comprehend:DetectSentiment",
                "comprehend:DetectEntities",
                "comprehend:DetectKeyPhrases",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructLambdaComprehendPolicy140F9123",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTextAnalysisLambdaFunctionServiceRoleE828FCCC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructLambdaEventBusPolicy557A2842": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestEventBus12626D66",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructLambdaEventBusPolicy557A2842",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructModerationLabelsLambdaFunction299A68E1": Object {
      "DependsOn": Array [
        "OrchestrationConstructModerationLabelsLambdaFunctionServiceRoleDefaultPolicy93642C99",
        "OrchestrationConstructModerationLabelsLambdaFunctionServiceRoleF7ACBAFD",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3aS3BucketBFA9559B",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3aS3VersionKey9C2CEDBC",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters7a2f02a07155b80b50b151a049c438d21e98a5f99239fd807bd4b79b69efcc3aS3VersionKey9C2CEDBC",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "S3_BUCKET_NAME": Object {
              "Ref": "OrchestrationConstructImageBucketS3Bucket20418E23",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructModerationLabelsLambdaFunctionServiceRoleF7ACBAFD",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructModerationLabelsLambdaFunctionServiceRoleDefaultPolicy93642C99": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructImageBucketS3Bucket20418E23",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructImageBucketS3Bucket20418E23",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructModerationLabelsLambdaFunctionServiceRoleDefaultPolicy93642C99",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructModerationLabelsLambdaFunctionServiceRoleF7ACBAFD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructModerationLabelsLambdaFunctionServiceRoleF7ACBAFD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructPublishEventsLambdaFunctionE1376EA6": Object {
      "DependsOn": Array [
        "OrchestrationConstructPublishEventsLambdaFunctionServiceRoleDefaultPolicy320C691C",
        "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9S3BucketBF0DC36C",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9S3VersionKey8BBC34FA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters041c7c667f2d52bd843e0b26060aa7ee700757c3d4c9c13dbe6258009c682dc9S3VersionKey8BBC34FA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_BUS_NAME": Object {
              "Ref": "TestEventBus12626D66",
            },
            "EVENT_NAMESPACE": "com.test.text",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructPublishEventsLambdaFunctionServiceRoleDefaultPolicy320C691C": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructPublishEventsLambdaFunctionServiceRoleDefaultPolicy320C691C",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructRawForTAFirehoseRoleDefaultPolicyFC48CB0E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructS3Bucket2727DF68",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructS3Bucket2727DF68",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructRawForTAFirehoseRoleDefaultPolicyFC48CB0E",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructRawForTAFirehoseRoleF2BBC200",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructRawForTAFirehoseRoleF2BBC200": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructRawForTAKinesisFirehoseE86C4BDA": Object {
      "DependsOn": Array [
        "OrchestrationConstructRawForTAFirehoseRoleDefaultPolicyFC48CB0E",
        "OrchestrationConstructRawForTAFirehoseRoleF2BBC200",
      ],
      "Properties": Object {
        "ExtendedS3DestinationConfiguration": Object {
          "BucketARN": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructS3Bucket2727DF68",
              "Arn",
            ],
          },
          "BufferingHints": Object {
            "IntervalInSeconds": 600,
            "SizeInMBs": 64,
          },
          "CloudWatchLoggingOptions": Object {
            "Enabled": true,
            "LogGroupName": Object {
              "Ref": "OrchestrationConstructRawForTAKinesisFirehosefirehoseloggroupF92AB0AD",
            },
            "LogStreamName": Object {
              "Ref": "OrchestrationConstructRawForTAKinesisFirehosefirehoseloggroupfirehoselogstream88E0B257",
            },
          },
          "CompressionFormat": "UNCOMPRESSED",
          "EncryptionConfiguration": Object {
            "KMSEncryptionConfig": Object {
              "AWSKMSKeyARN": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":kms:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":alias/aws/s3",
                  ],
                ],
              },
            },
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructRawForTAFirehoseRoleF2BBC200",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "OrchestrationConstructRawForTAKinesisFirehoseKinesisFirehosePolicyFEB8F134": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructS3Bucket2727DF68",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructS3Bucket2727DF68",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "logs:PutLogEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:",
                    Object {
                      "Ref": "OrchestrationConstructRawForTAKinesisFirehosefirehoseloggroupF92AB0AD",
                    },
                    ":log-stream:",
                    Object {
                      "Ref": "OrchestrationConstructRawForTAKinesisFirehosefirehoseloggroupfirehoselogstream88E0B257",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructRawForTAKinesisFirehoseKinesisFirehosePolicyFEB8F134",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructRawForTAKinesisFirehoseKinesisFirehoseRole7BE1E3D7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructRawForTAKinesisFirehoseKinesisFirehoseRole7BE1E3D7": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructRawForTAKinesisFirehosefirehoseloggroupF92AB0AD": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely",
            },
            Object {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructRawForTAKinesisFirehosefirehoseloggroupfirehoselogstream88E0B257": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LogGroupName": Object {
          "Ref": "OrchestrationConstructRawForTAKinesisFirehosefirehoseloggroupF92AB0AD",
        },
      },
      "Type": "AWS::Logs::LogStream",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructS3Bucket2727DF68": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "AccessLogD598EBE9",
          },
          "LogFilePrefix": "OrchestrationConstruct/",
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructS3BucketPolicy84DB4878": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "OrchestrationConstructS3Bucket2727DF68",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "OrchestrationConstructS3Bucket2727DF68",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "OrchestrationConstructStMacLogGroup86FAB25D": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W84",
              "reason": "Log group data is always encrypted in CloudWatch Logs using AWS Managed KMS Key. For customers wanting to us CMK for                     CloudWatchLogs should customize the solution further to add encryption options",
            },
            Object {
              "id": "W86",
              "reason": "Log Groups are set to 'Never Expire'. Customers should customize the retention policy based on their organization's                     retention policies",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": "/aws/vendedlogs/StateMachine-fakerandomstring/",
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructStateMachineWorkflowEngineExecutionAbortedAlarmFA7A72F2": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that aborted exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionsAborted",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Maximum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "OrchestrationConstructStateMachineWorkflowEngineExecutionFailedAlarm5512CA66": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that failed exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionsFailed",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "OrchestrationConstructStateMachineWorkflowEngineExecutionThrottledAlarmE931A386": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that throttled exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionThrottled",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05": Object {
      "DependsOn": Array [
        "OrchestrationConstructStateMachineWorkflowEngineStateMachineRoleDefaultPolicy1C64BE7B",
        "OrchestrationConstructStateMachineWorkflowEngineStateMachineRole21FD21B0",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"AnalyzeImage\\",\\"States\\":{\\"AnalyzeImage\\":{\\"Next\\":\\"TextImageSplitProcess\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructImageAnalysisLambdaFunctionB2EC65DD",
                  "Arn",
                ],
              },
              "\\"},\\"TextImageSplitProcess\\":{\\"Type\\":\\"Parallel\\",\\"Comment\\":\\"Parallely process Text and Image\\",\\"Next\\":\\"MergeJson\\",\\"InputPath\\":\\"$\\",\\"OutputPath\\":\\"$\\",\\"Branches\\":[{\\"StartAt\\":\\"DetectModerationLabels\\",\\"States\\":{\\"DetectModerationLabels\\":{\\"End\\":true,\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructModerationLabelsLambdaFunction299A68E1",
                  "Arn",
                ],
              },
              "\\"}}},{\\"StartAt\\":\\"Translate\\",\\"States\\":{\\"Translate\\":{\\"Next\\":\\"AnalyzeText\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTranslateLambdaFunctionE2F10F5D",
                  "Arn",
                ],
              },
              "\\"},\\"AnalyzeText\\":{\\"End\\":true,\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTextAnalysisLambdaFunction4FD55606",
                  "Arn",
                ],
              },
              "\\"}}}]},\\"MergeJson\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"account_name.$\\":\\"$[1].account_name\\",\\"platform.$\\":\\"$[1].platform\\",\\"search_query.$\\":\\"$[1].search_query\\",\\"feed.$\\":\\"$[1].feed\\",\\"Sentiment.$\\":\\"$[1].Sentiment\\",\\"SentimentScore.$\\":\\"$[1].SentimentScore\\",\\"KeyPhrases.$\\":\\"$[1].KeyPhrases\\",\\"Entities.$\\":\\"$[1].Entities\\",\\"moderation_labels_in_imgs.$\\":\\"$[0].moderation_labels_in_imgs\\",\\"text_in_images.$\\":\\"$[1].text_in_images\\"},\\"Next\\":\\"PublishEvent\\"},\\"PublishEvent\\":{\\"Next\\":\\"Success\\",\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructPublishEventsLambdaFunctionE1376EA6",
                  "Arn",
                ],
              },
              "\\"},\\"Success\\":{\\"Type\\":\\"Succeed\\"}}}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructStMacLogGroup86FAB25D",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": false,
          "Level": "ERROR",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructStateMachineWorkflowEngineStateMachineRole21FD21B0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "OrchestrationConstructStateMachineWorkflowEngineStateMachineLogGroup1C3FDDB1": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely",
            },
            Object {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructStateMachineWorkflowEngineStateMachineRole21FD21B0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "states.",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructStateMachineWorkflowEngineStateMachineRoleDefaultPolicy1C64BE7B": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W76",
              "reason": "The policy adds cloudwatch alarms and allows step function to invoke lambda tasks. Suppressing the                     SPCM violation as this policy is required to monitor as well as invoke specific tasks",
            },
            Object {
              "id": "W12",
              "reason": "The 'LogDelivery' actions do not support resource-level authorizations",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructImageAnalysisLambdaFunctionB2EC65DD",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructPublishEventsLambdaFunctionE1376EA6",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructModerationLabelsLambdaFunction299A68E1",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTranslateLambdaFunctionE2F10F5D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTextAnalysisLambdaFunction4FD55606",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructStateMachineWorkflowEngineStateMachineRoleDefaultPolicy1C64BE7B",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineRole21FD21B0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTextAnalysisLambdaFunction4FD55606": Object {
      "DependsOn": Array [
        "OrchestrationConstructTextAnalysisLambdaFunctionServiceRoleDefaultPolicy1788CF27",
        "OrchestrationConstructTextAnalysisLambdaFunctionServiceRoleE828FCCC",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersc01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6S3Bucket99334E05",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersc01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6S3VersionKey4EA1BA31",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersc01f7f6e74d90c571d41432a61a64b6bc39237b98449b7e79b671588175c8ac6S3VersionKey4EA1BA31",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructTextAnalysisLambdaFunctionServiceRoleE828FCCC",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructTextAnalysisLambdaFunctionServiceRoleDefaultPolicy1788CF27": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTextAnalysisLambdaFunctionServiceRoleDefaultPolicy1788CF27",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTextAnalysisLambdaFunctionServiceRoleE828FCCC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTextAnalysisLambdaFunctionServiceRoleE828FCCC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructTextRekAnalyze15062BBD": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Rekognition services. The Rekognition services do not have a resource arn.
                  This permission is retricted to the lambda function responsible for accessing the Amazon Rekognition service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "rekognition:detectText",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTextRekAnalyze15062BBD",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructImageAnalysisLambdaFunctionServiceRole8D0CDC70",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTranslateLambdaAED204A7": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Translate services. The translate services do not have a resource arn.
                  This permission is retricted to the lambda function responsible for accessing the Amazon Translate service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "translate:translateText",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "firehose:PutRecord",
                "firehose:PutRecordBatch",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructRawForTAKinesisFirehoseE86C4BDA",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTranslateLambdaAED204A7",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTranslateLambdaFunctionServiceRole9FDC386A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTranslateLambdaFunctionE2F10F5D": Object {
      "DependsOn": Array [
        "OrchestrationConstructTranslateLambdaFunctionServiceRoleDefaultPolicyBC54445D",
        "OrchestrationConstructTranslateLambdaFunctionServiceRole9FDC386A",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3S3Bucket3B1B5535",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3S3VersionKeyA2B0343F",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters04c68ec6d4e54d79334221fc91626149f55c8b373bdee7663c97e2eaeba683e3S3VersionKeyA2B0343F",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "KINESIS_FIREHOSE_NAME": Object {
              "Ref": "OrchestrationConstructRawForTAKinesisFirehoseE86C4BDA",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructTranslateLambdaFunctionServiceRole9FDC386A",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructTranslateLambdaFunctionServiceRole9FDC386A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructTranslateLambdaFunctionServiceRoleDefaultPolicyBC54445D": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTranslateLambdaFunctionServiceRoleDefaultPolicyBC54445D",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTranslateLambdaFunctionServiceRole9FDC386A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestEventBus12626D66": Object {
      "Properties": Object {
        "Name": "TestEventBus",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testFunction483F4CBE": Object {
      "DependsOn": Array [
        "testFunctionServiceRoleDefaultPolicy159F3A68",
        "testFunctionServiceRoleFEC29B6F",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992fS3BucketD992FB4D",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992fS3VersionKey995B9840",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters28cc63ca49ab1c9776cdd7794f42eb3f0d0f9c2c3c0f6cf5bb1243b2a62d992fS3VersionKey995B9840",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "STATE_MACHINE_ARN": Object {
              "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testFunctionServiceRoleFEC29B6F",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
      },
      "Type": "AWS::Lambda::Function",
    },
    "testFunctionServiceRoleDefaultPolicy159F3A68": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testFunctionServiceRoleDefaultPolicy159F3A68",
        "Roles": Array [
          Object {
            "Ref": "testFunctionServiceRoleFEC29B6F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testFunctionServiceRoleFEC29B6F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;
